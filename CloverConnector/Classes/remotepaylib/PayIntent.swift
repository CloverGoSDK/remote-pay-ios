/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import Foundation
//import CloverSDK
import ObjectMapper



public class PayIntent:Mappable {

    public private(set) var action:String?
    public private(set) var amount = 0
    public private(set) var tippableAmount:Int?
    public private(set) var tipAmount:Int?
    public private(set) var taxAmount:Int?
    public private(set) var orderId:String?
    public private(set) var employeeId:String?
    public private(set) var transactionType:TransactionType?
    //        public private(set) var serviceChargeAmount:ServiceChargeAmount
    public private(set) var isDisableCashBack = false
    public private(set) var isTesting = false
    public private(set) var cardEntryMethods = 15
    public private(set) var voiceAuthCode:String?
    public private(set) var postalCode:String?
    public private(set) var streetAddress:String?
    public private(set) var isCardNotPresent:Bool?
    public private(set) var cardDataMessage:String?
    public private(set) var remotePrint:Bool?
    public private(set) var transactionNo:String?
    public private(set) var isForceSwipePinEntry:Bool?
    public private(set) var disableRestartTransactionOnFail:Bool?
    public private(set) var externalPaymentId:String
    public private(set) var vaultedCard:CLVModels.Payments.VaultedCard?
    public private(set) var allowOfflinePayment:Bool?
    public private(set) var approveOfflinePaymentWithoutPrompt:Bool?
    public private(set) var requiresRemoteConfirmation:Bool?
    public private(set) var applicationTracking:CLVModels.Apps.AppTracking?
    public private(set) var allowPartialAuth = true
    public private(set) var transactionSettings:CLVModels.Payments.TransactionSettings?

    public init(amount:Int, externalId:String) {
        self.amount = amount
        self.externalPaymentId = externalId
    }
  public required init() {
        self.amount = 0
    self.externalPaymentId = ""
  }

  public required init(map:Map){
    self.amount = 0
    self.externalPaymentId = ""

  }

    public func mapping(map:Map) {

        action <- map["action"]
        amount <- map["amount"]
        tippableAmount <- map["tippableAmount"]
        tipAmount <- map["tipAmount"]
        taxAmount <- map["taxAmount"]
        orderId <- map["orderId"]
        employeeId <- map["employeeId"]
        transactionType <- map["transactionType"]
        //        serviceChargeAmount <- map["serviceChargeAmount"]
        isDisableCashBack <- map["isDisableCashBack"]
        isTesting <- map["isTesting"]
        cardEntryMethods <- map["cardEntryMethods"]
        voiceAuthCode <- map["voiceAuthCode"]
        postalCode <- map["postalCode"]
        streetAddress <- map["streetAddress"]
        isCardNotPresent <- map["isCardNotPresent"]
        cardDataMessage <- map["cardDataMessage"]
        remotePrint <- map["remotePrint"]
        transactionNo <- map["transactionNo"]
        isForceSwipePinEntry <- map["isForceSwipePinEntry"]
        disableRestartTransactionOnFail <- map["disableRestartTransactionOnFail"]
        externalPaymentId <- map["externalPaymentId"]
        vaultedCard <- map["vaultedCard"]
        allowOfflinePayment <- map["allowOfflinePayment"]
        approveOfflinePaymentWithoutPrompt <- map["approveOfflinePaymentWithoutPrompt"]
        requiresRemoteConfirmation <- map["requiresRemoteConfirmation"]
        applicationTracking <- map["applicationTracking"]
        allowPartialAuth <- map["allowPartialAuth"]
        transactionSettings <- map["transactionSettings"]
    }


    public class Builder {
        public var action:String?
        public var amount:Int = 0
        public var tippableAmount:Int?
        public var tipAmount:Int?
        public var taxAmount:Int?
        public var orderId:String?
        public var employeeId:String?
        public var transactionType:TransactionType?
        //        public var serviceChargeAmount:ServiceChargeAmount
        public var isDisableCashBack = false
        public var isTesting = false
        public var cardEntryMethods:Int = 0
        public var voiceAuthCode:String?
        public var postalCode:String?
        public var streetAddress:String?
        public var isCardNotPresent = false
        public var cardDataMessage:String?
        public var remotePrint = false
        public var transactionNo:String?
        public var isForceSwipePinEntry:Bool = false
        public var disableRestartTransactionOnFail = false
        public var externalPaymentId:String
        public var vaultedCard:CLVModels.Payments.VaultedCard?
        public var allowOfflinePayment:Bool?
        public var approveOfflinePaymentWithoutPrompt:Bool?
        public var requiresRemoteConfirmation:Bool?
        public var applicationTracking:CLVModels.Apps.AppTracking?
        public var allowPartialAuth = true
        public var transactionSettings:CLVModels.Payments.TransactionSettings?

        public init(amount:Int, externalId:String) {
            self.amount = amount
            self.externalPaymentId = externalId
        }

        public func build() -> PayIntent {
            var payIntent = PayIntent()
            payIntent.action = self.action
            payIntent.amount = self.amount
            payIntent.tippableAmount = self.tippableAmount
            payIntent.tipAmount = self.tipAmount
            payIntent.taxAmount = self.taxAmount
            payIntent.orderId = self.orderId
            payIntent.employeeId = self.employeeId
            payIntent.transactionType = self.transactionType
            //        payIntent.serviceChargeAmount = self.serviceChargeAmount
            payIntent.isDisableCashBack = self.isDisableCashBack
            payIntent.isTesting = self.isTesting
            payIntent.cardEntryMethods = self.cardEntryMethods
            payIntent.voiceAuthCode = self.voiceAuthCode
            payIntent.postalCode = self.postalCode
            payIntent.streetAddress = self.streetAddress
            payIntent.isCardNotPresent = self.isCardNotPresent
            payIntent.cardDataMessage = self.cardDataMessage
            payIntent.remotePrint = self.remotePrint
            payIntent.transactionNo = self.transactionNo
            payIntent.isForceSwipePinEntry = self.isForceSwipePinEntry
            payIntent.disableRestartTransactionOnFail = self.disableRestartTransactionOnFail
            payIntent.externalPaymentId = self.externalPaymentId
            payIntent.vaultedCard = self.vaultedCard
            payIntent.allowOfflinePayment = self.allowOfflinePayment
            payIntent.approveOfflinePaymentWithoutPrompt = self.approveOfflinePaymentWithoutPrompt
            payIntent.requiresRemoteConfirmation = self.requiresRemoteConfirmation
            payIntent.applicationTracking = self.applicationTracking
            payIntent.allowPartialAuth = self.allowPartialAuth
            payIntent.transactionSettings = self.transactionSettings

            return payIntent
        }
    }
}
